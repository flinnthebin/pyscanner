#!/usr/bin/python3

import argparse
from pythonping import ping

class InputHelper:
    @staticmethod
    def get_input(questions):
        responses = {}
        for question in questions:
            prompt = question["prompt"]
            variable = question["variable"]
            default = question.get("default", None)
            response = input(prompt)
        if not response and default is not None:
            response = default
        if variable == "timeout":
            response = int(response)
            responses[variable] = response
            return responses

class PingSweep:
    def ping(self):
        questions = [
        {
        "prompt": "Target IP: ",
        "variable": "target_ip"
        }
        ]
        responses = InputHelper.get_input(questions)
        target_ip = responses["target_ip"]
        print(f"Performing a ping on {target_ip}")
        # Code to perform a ping
        response = ping(target_ip, verbose=True)
        return response
        
    def ping_sweep(self, verbose=False):
        questions = [
            {
                "prompt": "Starting IP: ",
                "variable": "start_ip"
            },
            {
                "prompt": "End IP: ",
                "variable": "end_ip"
            },
            {
                "prompt": "Timeout: (default=1) ",
                "variable": "timeout",
                "default": 1
            }
        ]
        responses = InputHelper.get_input(questions)
        start_ip = responses["start_ip"]
        end_ip = responses["end_ip"]
        timeout = responses["timeout"]
        results = {}
        start_ip_octets = start_ip.split(".")
        start_ip_base = ".".join(start_ip_octets[:3]) # first 3 octets of start IP
        start_ip_fourth = int(start_ip_octets[3]) # 4th octet of start IP

        for i in range(start_ip_fourth, int(end_ip.split(".")[3]) + 1):
            target_ip = f"{start_ip_base}.{i}"
            response = ping(start_ip, end_ip, timeout=timeout, verbose=verbose)
            results[target_ip] = response.success()
        return results


class PortScan:
    # TODO: implement network scanning using scapy, socket or pyshark libs
    def scan(self, target):
        # Code to perform a port scan
        print("Performing a port scan on target:", target)

class SNMPScan:
    # TODO: implement SNMP scanning using pysnmp or snmpy
    def scan(self, target):
        # Code to perform an SNMP scan
        print("Performing an SNMP scan on target:", target)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-sw", "--pingsweep", help="Perform a ping sweep", action="store_true")
    parser.add_argument("-ps", "--portscan", help="Perform a port scan", action="store_true")
    parser.add_argument("-sn", "--snmpscan", help="Perform an SNMP scan", action="store_true")
    args = parser.parse_args()

    if args.pingsweep:
        scan = PingSweep()
        scan.ping()
    elif args.portscan:
        scan = PortScan()
        scan.scan(args.target)
    elif args.snmpscan:
        scan = SNMPScan()
        scan.scan(args.target)
    else:
        print("No scanning technique specified. Use -h for help.")
